#!/usr/bin/env bash

if [ $(id -u) == "0" ] ; then
  echo '! must NOT be run as root'
  exit 57
fi

O="$(mktemp /tmp/update.out.XXXXXXXX)"
E="$(mktemp /tmp/update.err.XXXXXXXX)"

echo '+ Parsing arguments'

### PARSING BEGIN ###

# A POSIX variable
OPTIND=1         # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
pull=false
modules=false
plugins=false
clean=false
sync=false
install=false
diff=false
update=true
restart=false
vim=false
fish=false
_wait=false

function show_help ( ) {
  echo '! No help for the moment :(' ;
  echo ' > update script file is '"${BASH_SOURCE}"
}

while getopts "h?apmfcsiurvdzwxPMFCSIURVDZWX" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    a)  pull=true
        modules=true
        plugins=true
        clean=true
        sync=true
        install=true
        update=true
        restart=true
        vim=true
        fish=true
        ;;
    p)  pull=true
        ;;
    m)  modules=true
        ;;
    x)  plugins=true
        ;;
    c)  clean=true
        ;;
    s)  sync=true
        ;;
    i)  install=true
        ;;
    d)  diff=true
        update=false
        ;;
    u)  update=true
        ;;
    r)  restart=true
        ;;
    v)  vim=true
        ;;
    z)  fish=true
        ;;
    w)  _wait=true
        ;;
    P)  pull=false
        ;;
    M)  modules=false
        ;;
    X)  plugins=false
        ;;
    C)  clean=false
        ;;
    S)  sync=false
        ;;
    I)  install=false
        ;;
    D)  diff=false
        ;;
    U)  update=false
        ;;
    R)  restart=false
        ;;
    V)  vim=false
        ;;
    Z)  fish=false
        ;;
    W)  _wait=false
        ;;
    esac
done

shift $((OPTIND-1))

[ "$1" = "--" ] && shift

### PARSING END ###

function _exit ( ) {
  rm -f "$O" "$E"
  if $_wait ; then
    read
  fi
  exit "$1"
}

function _do ( ) {
  "$@" 1>"$O" 2>"$E"
  _check "$?"
}

function _check ( ) {
  if [ "$1" -ne 0 ] ; then
    echo '! NONZERO RETURN CODE'
    echo ' > There was an error!'
    >&1 cat "$O"
    >&2 cat "$E"
    _exit "$1"
  fi
}

function _trap ( ) {
  echo '! TRAP'
  echo ' > There was an error!'
  _exit 70;
}

trap _trap SIGHUP SIGINT SIGTERM

echo '+ Looking up dotfiles'
DOTFILES="$(cat "$HOME/.config/dotfiles/location")"
PLUGINS="$HOME/.config/dotfiles/plugins"

if [ "$DOTFILES" = '' ] ; then
  echo '! Could not find dotfiles :('
  echo ' > Try running boostrap/dotfiles-udpate in the dotfiles directory!'
  echo ' > The update script should find the dotfiles after that :)'
  _exit 58
fi

echo ' * dotfiles @ '"$DOTFILES"

echo '+ Go to dotfiles'
_do cd "$DOTFILES"

if $pull ; then

  echo '+ Pull dotfiles'
  _do git pull

fi

if $modules ; then

  echo '+ Pull submodules'
  _do git submodule foreach "(git checkout master; git pull)"

fi

if $clean ; then

  echo '+ Clean up old software'
  sudo sh "$DOTFILES"/bootstrap/clean || _exit "$?"

fi

if $sync ; then

  echo '+ Update already installed software'
  sh "$DOTFILES"/bootstrap/update-software || _exit "$?"

fi

if $install ; then

  echo '+ Install new software'
  bash "$DOTFILES"/bootstrap/install-software || _exit "$?"

fi

if $diff ; then

  echo '+ Diff dotfiles'
  sh "$DOTFILES"/bootstrap/dotfiles-diff || exit "$?"

fi

if $update ; then

  echo '+ Update dotfiles'
  sh "$DOTFILES"/bootstrap/dotfiles-update -f || exit "$?"

fi

if $plugins ; then

  if [ -d "$PLUGINS" ] ; then
    echo '+ Plugins @ '"$PLUGINS"' :)'

    for plugin in $(ls -1a --color=never "$PLUGINS" | tail -c +6); do
      PLUGIN="$PLUGINS/$plugin"
      echo " * Plugin $plugin @ $PLUGIN"
      echo '  째 Go to '"$PLUGIN"
      _do cd "$PLUGIN"

      if $pull ; then

        echo '  째 Pull '"$PLUGIN"
        _do git pull

      fi

      if $diff ; then

        echo '  째 Diff '"$PLUGIN"
        sh "$PLUGIN"/dotfiles.diff || exit "$?"

      fi

      if $update ; then

        echo '  째 Update '"$PLUGIN"
        sh "$PLUGIN"/dotfiles.update -f || exit "$?"

      fi

    done

  else
    echo '+ No plugins @ '"$PLUGINS"' :('
  fi

fi

if $restart ; then

  echo '+ Enable ntpd'
  _do sudo systemctl enable ntpd # clock sync
  _do sudo systemctl start ntpd
  echo '+ Enable atd'
  _do sudo systemctl enable atd # at program
  _do sudo systemctl start atd
  echo '+ Enable devmon'
  _do sudo systemctl enable devmon@"$USER" # auto mount usb drives program
  _do sudo systemctl start devmon@"$USER"
  echo '+ Enable ssh-agent'
  _do systemctl --user enable ssh-agent
  _do systemctl --user start ssh-agent

fi

if $vim ; then

  echo '+ Update vim pluggins'
  vim.update || _exit "$?"

fi

if $fish ; then

  echo '+ Update fish pluggins'
  fish -c 'fisher up' || _exit "$?"

fi

if $_wait ; then
  echo '+ Done!'
fi

_exit 0
